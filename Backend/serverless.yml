# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: keep-up
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  # environment:
  #  endpoint: https://drswu6a8f3.execute-api.eu-central-1.amazonaws.com/dev/
  iamRoleStatements:
    - Effect: "Allow"
      Action:
       - dynamodb:Query
       - dynamodb:Scan
       - dynamodb:GetItem
       - dynamodb:PutItem
       - dynamodb:UpdateItem
       - dynamodb:DeleteItem
      # Resource: "arn:aws:dynamodb:eu-central-1:865919825353:table/keep-up-sandown-dev-donations"
      Resource: 'arn:aws:dynamodb:eu-central-1:*:*'
    - Effect: "Allow"
      Action:
       - ses:SendEmail
       - ses:SendRawEmail
       - ses:SendTemplatedEmail
      Resource: "*"

# you can overwrite defaults here
  stage: dev
  region: eu-central-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  createCheckout:
    handler: payments/payments.createCheckout
    events:
      - http:
          path: createCheckout
          method: GET
          cors: true
  recordPayment:
    handler: payments/payments.recordPayment
    events:
      - http:
          path: recordPayment
          method: GET
          cors: true
  getSuburbs:
    handler: suburbs/getAllSuburbs.getAllSuburbs
    events:
      - http:
          path: getSuburbs
          method: GET
          cors: true
  getProjects:
    handler: projects/getProjects.getProjects
    events:
      - http:
          path: getProjects
          method: GET
          cors: true
  getContributors:
    handler: contributors/getContributors.getContributors
    events:
      - http:
          path: getContributors
          method: GET
          cors: true
  getEvents:
    handler: events/getEvents.getEvents
    events:
      - http:
          path: getEvents
          method: GET
          cors: true
  postEvents:
    handler: events/postEvents.postEvents
    events:
      - http:
          path: postEvents
          method: POST
          cors: true
  updateEvent:
    handler: events/updateEvent.updateEvent
    events:
      - http:
          path: updateEvent
          method: PATCH
          cors: true
  deleteEvent:
    handler: events/deleteEvent.deleteEvent
    events:
      - http:
          path: deleteEvent
          method: DELETE
          cors: true
  contactUs:
    handler: contact/contact.handler
    events:
      - http:
          path: contactUs
          method: POST
          cors: true getDonations
  getDonations:
    handler: donations/donations.getDonations
    events:
      - http:
          path: getDonations
          method: GET
          cors: true         
          
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
  

resources:
  Resources:
    DonationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-donations
        AttributeDefinitions:
          - AttributeName: donationId
            AttributeType: S
        KeySchema:
          - AttributeName: donationId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    SuburbsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-suburbs
        AttributeDefinitions:
          - AttributeName: suburbId
            AttributeType: S
        KeySchema:
          - AttributeName: suburbId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    ProjectsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-projects
        AttributeDefinitions:
          - AttributeName: projectId
            AttributeType: S
        KeySchema:
          - AttributeName: projectId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    ContributorsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-contributors
        AttributeDefinitions:
          - AttributeName: contributorId
            AttributeType: S
        KeySchema:
          - AttributeName: contributorId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    EventsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-events
        AttributeDefinitions:
          - AttributeName: eventId
            AttributeType: S
        KeySchema:
          - AttributeName: eventId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

